<template>
  <q-dialog ref="dialogRef" @hide="onDialogHide">
    <q-card class="q-form-dialog" style="width: 450px">
      <!-- 标题 -->
      <q-toolbar>
        <q-toolbar-title>{{ isNew ? '新增' : '编辑' }}<#=tableComment#></q-toolbar-title>
        <q-btn v-close-popup icon="close" round flat />
      </q-toolbar>
      <q-separator />

      <!-- 内容 -->
      <q-card-section>
        <q-form ref="formRef" @submit="handleSubmit">
<#
    foreach (var property in entityType.GetProperties().Where(t=>!systemFields.Contains(t.Name) && !t.IsPrimaryKey()).OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        var propName = property.Name.Substring(0,1).ToLower()+property.Name.Substring(1);
        if(propName=="disabled") continue;
        var needsNullable =( Options.UseNullableReferenceTypes && property.IsNullable && !property.ClrType.IsValueType)
            ||(code.Reference(property.ClrType)).Contains("?");
        var extraAtt = "";
        if(propName=="remark") extraAtt += " type=\"textarea\" rows=\"2\"";
        if(!needsNullable) extraAtt += " :rules=\"[required]\"";
#>
          <q-form-item lable="<#=  string.IsNullOrEmpty(property.GetComment()) ? "" : code.XmlComment(property.GetComment()) #>：">
            <q-input v-model="dto.<#=propName#>"<#=extraAtt#> /> 
          </q-form-item>
<#
    }
#>
        </q-form>
      </q-card-section>

      <!-- 操作 -->
      <q-separator />
      <q-card-actions align="right">
        <q-btn label="取 消" outline @click="onDialogCancel" />
        <q-btn label="确 定" color="primary" :loading="loading" @click="formRef?.submit()" />
      </q-card-actions>
    </q-card>
  </q-dialog>
</template>

<script setup lang="ts">
  defineOptions({ name: '<#=entityName#>Form' });

  import { QForm, useDialogPluginComponent } from 'quasar';
  import { type <#=entityName#>Dto, get<#=entityName#>, save<#=entityName#> } from 'src/api/<#=cfg.ModuleName.Kebaberize()#>/<#=entityName.Kebaberize()#>';

  const props = defineProps<{ id?: IdType }>();
  defineEmits([...useDialogPluginComponent.emits]);

  // 属性事件
  const { formRef, dto, loading, isNew, isEdit } = useForm<<#=entityName#>Dto>(props.id);
  const { dialogRef, onDialogHide, onDialogOK, onDialogCancel } = useDialogPluginComponent();

  // 加载数据
  onMounted(() => {
    if (isEdit.value) {
      get<#=entityName#>(props.id).then((<#=buProperty#>) => (dto.value = <#=buProperty#>));
    }
  });

  // 保存提交
  function handleSubmit() {
    loading.value = true;
    save<#=entityName#>(dto.value)
      .then(() => {
        Message.success('保存成功');
        onDialogOK();
      })
      .finally(() => setTimeout(() => (loading.value = false), 300));
  }
</script>