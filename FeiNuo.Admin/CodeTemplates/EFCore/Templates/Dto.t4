using <#=Options.ModelNamespace#>;
using System.ComponentModel.DataAnnotations;

namespace <#=cfg.RootNameSpace#>.Services<#= cfg.ModuleName == "" ? "" : ("."+cfg.ModuleName)#>
{
    #region DTO属性映射    
    //public class <#= entityName #>DtoRegister : IRegister
    //{
    //    public void Register(TypeAdapterConfig config)
    //    {
    //        config.ForType<<#= entityType.Name #>Entity, <#= entityName #>Dto>().Map(d => d.DeptName, s => s.Dept.DeptName, s => s.Dept != null);
    //    }
    //}
    #endregion

    #region 数据传输对象 <#=entityName#>Dto
    /// <summary>
    /// 数据传输对象：<#=tableComment#>
    /// </summary>
    public class <#=entityName#>Dto : BaseDto
    {
<#
        foreach (var property in entityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
        {
            if(systemFields.Contains(property.Name)) continue;
            var colComment = string.IsNullOrEmpty(property.GetComment())?"":code.XmlComment(property.GetComment(), indent: 1);
            var needsNullable = Options.UseNullableReferenceTypes && property.IsNullable && !property.ClrType.IsValueType;
            var needsInitializer = Options.UseNullableReferenceTypes && !property.IsNullable && !property.ClrType.IsValueType;
            var needVadation = !systemFields.Contains(property.Name) && property.Name != pkColumn.Name;
#>
        /// <summary>
        /// <#= colComment #>
        /// </summary>
<#  if(!property.IsNullable  && !property.ClrType.IsValueType && needVadation) { #>
        [Required(ErrorMessage = "【<#= colComment #>】不能为空")]
<#  } if(code.Reference(property.ClrType)=="string"  && needVadation) { #>
        [StringLength(<#=property.GetMaxLength()#>, ErrorMessage = "【<#= colComment #>】长度不能超过 <#=property.GetMaxLength()#>。")]
<# } #>
        public <#= code.Reference(property.ClrType) #><#= needsNullable ? "?" : "" #> <#= property.Name #> { get; set; }<#= needsInitializer ? " = null!;" : "" #>

<# } #>
    }
    #endregion

    #region 数据查询对象
    /// <summary>
    /// 查询模型：<#=tableComment#>
    /// </summary>
    public class <#=entityName#>Query : AbstractQuery<<#=entityType.Name#>Entity>
    {
        /// <summary>
        /// 是否作废
        /// </summary>
        public bool? Disabled { get; set; }

        /// <summary>
        /// 根据查询条件添加查询表达式
        /// </summary>
        protected override void MergeQueryExpression()
        {
            // AddExpression(Disabled.HasValue, r => r.Disabled == Disabled!.Value);
            // AddExpression(RoleCode, r => r.RoleCode == RoleCode);
            // AddSearchExpression(s => o => o.RoleCode.Contains(s) || o.RoleName.Contains(s));
            AddDateExpression(s => o => o.CreateTime >= s, e => o => o.CreateTime <= e);
        }
    }
    #endregion
}
